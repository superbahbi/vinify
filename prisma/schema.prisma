// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Wine {
  id          String      @id
  name        String
  vintage     Int
  varietal    String
  inventories Inventory[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Inventory {
  id        String   @id
  stock     Int
  sold      Int
  wine      Wine     @relation(fields: [wineId], references: [id])
  wineId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vineyard {
  id        String   @id
  name      String
  location  String
  varietals String
  acreage   Float
  owner     Owner    @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id
  date       DateTime
  customer   Customer    @relation(fields: [customerId], references: [id])
  customerId String
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String   @id
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  wine      Wine     @relation(fields: [wineId], references: [id])
  wineId    String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vendor {
  id           String   @id
  name         String
  contactName  String
  contactEmail String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Customer {
  id        String   @id
  name      String
  email     String
  phone     String
  address   String
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Owner {
  id        String     @id
  name      String
  email     String
  phone     String
  vineyards Vineyard[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
